---
- name: Get xnames for Application role nodes
  authorized:
    endpoint: "sls/v1/search/hardware?extra_properties.Role=Application"
    method: get
  register: sls

- name: Searching SLS for Application nodes
  set_fact:
    uan_xname: "{{ item.Xname }}"
    uan_bmc: "{{ item.Parent }}"
  register: uan_list
  loop: "{{ sls.response }}"
  when: sls.response is defined

- name: Configure UAN network boot
  no_log: true
  ipmi_boot:
    name: "{{ item }}"
    user: "{{ uan_ipmi_user }}"
    password: "{{ bmc_root_password }}"
    bootdev: network
    uefiboot: yes
  loop: "{{ uan_list.results | map(attribute='ansible_facts.uan_bmc') | list }}"

- name: Power off our UANs for discovery
  no_log: true
  ipmi_power:
    name: "{{ item }}"
    user: "{{ uan_ipmi_user }}"
    password: "{{ bmc_root_password }}"
    state: off
  loop: "{{ uan_list.results | map(attribute='ansible_facts.uan_bmc') | list }}"

- name: Boot our UANs for discovery
  no_log: true
  ipmi_power:
    name: "{{ item }}"
    user: "{{ uan_ipmi_user }}"
    password: "{{ bmc_root_password }}"
    state: on
  loop: "{{ uan_list.results | map(attribute='ansible_facts.uan_bmc') | list }}"

- name: Wait for the UANs to be discovered (20-60 minutes)
  authorized:
    method: get
    endpoint: "smd/hsm/v1/Inventory/ComponentEndpoints/{{ item }}"
  register: uan_discovery
  until: uan_discovery.failed == false
  retries: 180
  delay: 30
  loop: "{{ uan_list.results | map(attribute='ansible_facts.uan_xname') | list }}"

- name: Restart conman pod
  shell: "kubectl delete pods -A -l {{ conman_label }}"

- name: Restart cray-cps-cm-pm pods
  shell: "kubectl delete pods -A -l {{ cps_cm_pm_label }}"

- name: "Get UAN base BOS session template - {{ uan_bos_base_template }}"
  authorized:
    method: get
    endpoint: "bos/v1/sessiontemplate/{{ uan_bos_base_template }}"
  register: bos_resp

- name: "Construct uan_session_boot_set from {{ uan_base_boot_set }} boot set"
  set_fact:
    uan_session_boot_set: "{{ bos_resp.response.boot_sets[uan_base_boot_set] }}"
  
- name: Create S3 BOS uan boot_set
  set_fact:
    uan_boot_set:
      boot_ordinal: "{{ uan_boot_ordinal }}"
      kernel_parameters: "{{ uan_kernel_parameters }}"
      network: "{{ uan_network }}"
      node_list: "{{ uan_list.results | map(attribute='ansible_facts.uan_xname') | list }}"
      rootfs_provider: "{{ uan_session_boot_set.rootfs_provider | default( uan_rootfs_provider ) }}"
      rootfs_provider_passthrough: "{{ uan_session_boot_set.rootfs_provider_passthrough | default( uan_rootfs_provider_passthrough ) }}"
      etag: "{{ uan_session_boot_set.etag | default('') }}"
      path: "{{ uan_session_boot_set.path }}"
      type: "{{ uan_session_boot_set.type }}"
  when: uan_session_boot_set.type is defined and uan_session_boot_set.type|lower == "s3"

- name: Create non-S3 BOS uan boot_set
  set_fact:
    uan_boot_set:
      boot_ordinal: "{{ uan_boot_ordinal }}"
      kernel_parameters: "{{ uan_kernel_parameters }}"
      network: "{{ uan_network }}"
      node_list: "{{ uan_list.results | map(attribute='ansible_facts.uan_xname') | list }}"
      rootfs_provider: "{{ uan_session_boot_set.rootfs_provider | default( uan_rootfs_provider ) }}"
      rootfs_provider_passthrough: "{{ uan_session_boot_set.rootfs_provider_passthrough | default( uan_rootfs_provider_passthrough ) }}"
      ims_image_id: "{{ uan_session_boot_set.ims_image_id }}"
  when: uan_session_boot_set.type is not defined

- name: Create UAN BOS session template
  authorized:
    endpoint: bos/v1/sessiontemplate
    method: post
    body:
       name: "{{ uan_bos_name }}"
       description: "{{ uan_bos_description }}"
       cfs: 
         clone_url: "{{ uan_cfs_url }}"
         branch: "{{ uan_cfs_branch }}"
       enable_cfs: "{{ uan_enable_cfs }}"
       partition: "{{ uan_partition }}"
       boot_sets:
         uan: "{{ uan_boot_set }}"

- name: Boot UANs with BOS
  authorized:
    endpoint: bos/v1/session
    method: post
    body:
      templateUuid: "{{ uan_bos_name }}"
      operation: reboot
  register: uan_bos_session

- debug:
    var: uan_bos_session.response.links[0].href

- name: Monitor BOS session
  block:
    - name: Get BOS session status
      authorized:
        endpoint: "bos/{{ uan_bos_session.response.links[0].href }}/status"
        method: get
      register: uan_bos_session_status
      retries: 6
      delay: 5
      until:
        - uan_bos_session_status is not failed

    - name: Watching BOS session status for completion
      authorized:
        endpoint: "bos/{{ uan_bos_session.response.links[0].href }}/status"
        method: get
      register: uan_bos_session_status_retry
      retries: 240
      delay: 5
      when: uan_bos_session_status.response.metadata.complete is defined
      until:
        - uan_bos_session_status_retry.response.metadata.complete == true

    - name: Get session template (status endpoint unavailable)
      authorized:
        endpoint: "bos/{{ uan_bos_session.response.links[0].href }}"
        method: get
      register: bos_result
      when:
        - uan_bos_session_status.response.metadata.complete is not defined

    - name: INFO UAN template UUID
      debug:
        var: bos_result.response.templateUuid
      when: bos_result.response.templateUuid is defined

    - name: Watching BOS session status for completion when status endpoint is not available
      authorized:
        endpoint: "bos/{{ uan_bos_session.response.links[0].href }}/status/{{ bos_result.response.templateUuid }}"
        method: get
      register: uan_bos_status
      retries: 240
      delay: 5
      when: uan_bos_session_status.response.metadata.complete is not defined
      until:
        - uan_bos_status.response.metadata.complete is defined
        - uan_bos_status.response.metadata.complete
