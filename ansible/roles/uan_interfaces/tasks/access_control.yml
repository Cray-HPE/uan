#
# MIT License
#
# (C) Copyright [2021-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
---
- name: Get API gateway IPs from DNS using a list
  set_fact:
    gw_lookup_list: '{{ lookup("dig", "{{ item }}.") }}'
  loop: "{{ api_gateways }}"
  register: gw_lookup_list

- name: Split strings in gw_ip_list
  set_fact:
     gw_split_ips: "{{ item.split(',') }}"
  loop: "{{ gw_lookup_list.results|map(attribute='ansible_facts.gw_lookup_list')|list }}"
  register: gw_split_ips

- name: Flatten list of IPs
  set_fact:
    gw_ip_list: "{{ item }}"
  with_items: "{{ gw_split_ips.results|map(attribute='ansible_facts.gw_split_ips')|list }}"
  register: gw_ip_list

- name: Make gw_ip_list unique
  set_fact:
    gw_ip_list: "{{ gw_ip_list.results|map(attribute='ansible_facts.gw_ip_list')|list|unique }}"

- name: Clear iptables OUTPUT chain
  command: "iptables -F OUTPUT"

- name: Setup root user iptables
  command: "iptables -A OUTPUT -p tcp -m multiport --dports {{ api_gw_ports }} -d {{ item }} -m owner --uid-owner root -j ACCEPT"
  with_items: "{{ gw_ip_list }}"
  when: gw_ip_list|length > 0

- name: Setup non-root user iptables
  command: "iptables -A OUTPUT -p tcp -m multiport --dports {{ api_gw_ports }} -d {{ item }} -j DROP"
  with_items: "{{ gw_ip_list }}"
  when: gw_ip_list|length > 0

- block:
  - name: Show CAN
    debug:
      msg: "{{ customer_access_network }}"
    when: customer_access_network is defined

  - name: Set access rules to CAN
    command:  "{{ item }}"
    with_items:
      - bash -c "iptables -A OUTPUT -d {{customer_access_network}} -m owner --uid-owner root -j ACCEPT"
      - bash -c "iptables -A OUTPUT -d {{customer_access_network}} -j DROP"
    when: customer_access_network is defined

  when: uan_can_setup

- name: Read access rules to k8s api gw
  command:  bash -c "iptables -L -n --line-numbers"
  register: iptables_list
  when: gw_ip_list|length > 0

- name: List resulting iptables
  debug:
    msg: "{{ iptables_list.stdout_lines }}"
  when: iptables_list is defined