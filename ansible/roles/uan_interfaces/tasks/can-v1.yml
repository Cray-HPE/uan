# Copyright 2020, Cray Inc. All Rights Reserved.
---

- name: Configure CAN v1 on NCNs
  block:

  - name: Get internal IP
    set_fact:
      internal_can_ip: "{{ item.address }}"
    when: item.label == ansible_hostname | regex_replace('(-nmn)$|(-can)$') + '-can'
    loop: "{{ imported_networks.networks.customer_access.blocks.ipv4[0].subnets[0].reserved | list }}"

  - name: Get last octet of internal IP
    set_fact: octet={{ internal_can_ip.split('.')[3] }}

  # Uses the nth IP of the customer_access_network subnet where n is the last octet of the internal CAN IP
  - name: Get external IP
    set_fact:
        external_can_ip: "{{ imported_customer_var.customer_access_network | ipaddr(octet|int) | ipaddr('address') }}"

  - debug:
      msg: "External CAN IP - {{ external_can_ip }}"

  - name: Configure ifcfg-vlan007
    template:
      src: ifcfg-vlan007-v1.j2
      dest: /etc/sysconfig/network/ifcfg-vlan007
      mode: 0644

  - name: Configure iproute2 tables
    lineinfile:
      path: /etc/iproute2/rt_tables
      regexp: '^{{ item.pref }}\s+{{ item.name }}'
      line: "{{ item.pref }}       {{ item.name }}"
    loop: "{{ rt_tables }}"

  - name: Configure ifrule-vlan007
    template:
      src: ifrule-vlan007.j2
      dest: /etc/sysconfig/network/ifrule-vlan007
      owner: root
      mode: 0600

  - name: Configure ifroute-vlan007
    template:
      src: ifroute-vlan007-v1.j2
      dest: /etc/sysconfig/network/ifroute-vlan007
      owner: root
      mode: 0600

  - name: Ensure wicked script directories exist
    file:
      path: "/etc/wicked/scripts/{{ item }}"
      state: directory
    loop: [ "post-up", "post-down" ]

  - name: Configure can-up.sh
    template:
      src: can-up.j2
      dest: "/etc/wicked/scripts/post-up/can-up.sh"
      owner: root
      mode: 0755

  - name: Configure can-down.sh
    template:
      src: can-down.j2"
      dest: "/etc/wicked/scripts/post-down/can-down.sh"
      owner: root
      mode: 0755

  - name: Add alias to ifcfg-lo
    lineinfile:
      path: /etc/sysconfig/network/ifcfg-lo
      regexp: '^IPADDR_2='
      line: IPADDR_2={{ external_can_ip }}/32

  - name: Add route for local services
    command: "ip route add {{ nmn_svc[0].network }} via {{ nmn_vlan2[0].gateway }} dev eth0"
    changed_when: result.rc != 0 or result.rc == 2
    failed_when: result.rc != 0 and result.rc != 2
    register: result

  - name: Add alias to lo interface
    command: "ip addr add {{ external_can_ip }}/32 dev lo"
    changed_when: result.rc == 0
    failed_when: result.rc != 0 and result.rc != 2
    register: result

  - name: Tell DHCP client to not set default gateway
    lineinfile:
      path: /etc/sysconfig/network/dhcp
      regex: '^DHCLIENT_SET_DEFAULT_ROUTE='
      line: DHCLIENT_SET_DEFAULT_ROUTE="no"

  - name: Remove existing default route
    command: "ip route delete default"
    changed_when: result.rc != 0 or result.rc == 2
    failed_when: result.rc != 0 and result.rc != 2
    register: result

  - name: Restart vlan007 interface to set the ip rule and routes
    shell: "ifdown vlan007;sleep 5;ifup vlan007"
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result

  - name: Check that we have the default route we are expecting
    shell: "ip route | grep default | grep -q 'src {{ external_can_ip }}'"
    failed_when: result.rc != 0
    register: result

  - name: Check that we have the ip rule we are expecting
    shell: "ip rule list | grep rt_can | grep -q {{ imported_customer_var.customer_access_network }}"
    failed_when: result.rc != 0
    register: result

  - name: Check that the lo interface has the expected alias
    shell: "ip addr show lo | grep -q {{ external_can_ip }}/32"
    failed_when: result.rc != 0
    register: result

  when:
    - imported_customer_var.customer_access_network is defined
    - imported_networks.networks.customer_access is defined

