# Copyright 2020-2021 Hewlett Packard Enterprise Development LP
---
- name: Get CAN IP from DNS
  set_fact:
    can_ip: "{{ lookup('dig', ansible_hostname | regex_replace('(-nmn)$|(-can)$') + '-can.can') }}"

- name: INFO
  debug:
    msg: "CAN IP - {{ can_ip }}"

- name: Get Customer Access Network info from SLS
  local_action:
    module: uri
    url: http://cray-sls/v1/search/networks?name=CAN
    method: GET
  register: sls_can

- name: Get Customer Access Network CIDR from SLS, if network exists. 
  # This assumes that the CAN network is _always_ the third item in the array. This makes the 
  # implementation fragile. See CASMCMS-6714.
  set_fact:
    customer_access_network: "{{ sls_can.json[0].ExtraProperties.Subnets[2].CIDR }}"
  when: sls_can.status == 200

- name: Get Customer Access Network Gateway from SLS, if network exists
  set_fact:
    customer_access_gateway: "{{ sls_can.json[0].ExtraProperties.Subnets[2].Gateway }}"
  when: sls_can.status == 200

- name: WARNING
  debug:
    msg: "No Customer Access Network defined for the node, skipping CAN configuration."
  when:
    - can_ip == 'NXDOMAIN'
    - customer_access_network is not defined
    - customer_access_gateway is not defined

- name: Initialize list of uan_can_devices
  set_fact:
    uan_can_devices: []
    uan_25G_can_devices: []
    uan_40G_can_devices: []

- name: Configure CAN v2 on UANs
  block:

  - name: Get CAN Prefix
    set_fact:
        can_prefix: "{{ customer_access_network | ipaddr('prefix') }}"

  - name: Get list of possible CAN interfaces
    shell: "ip -o link list | cut -f 2 -d ':' | tr -d ' ' | egrep -v 'lo|hsn|bond|lan|nmn0'"
    register: uan_device_list

  - name: Ensure list of possible CAN interfaces are UP
    shell: "ip link set dev {{ item }} up"
    register: cmd_out
    failed_when: cmd_out.rc not in [0, 1]
    loop: "{{ uan_device_list.stdout_lines }}"

  - name: List possible CAN intefaces
    debug:
      msg: "{{uan_device_list.stdout_lines }}"

  - name: Collect the ethernet device speeds of UAN devices
    shell: "ethtool {{ item }} | grep Speed | tr -d ' '"
    register: uan_device_speed
    loop: "{{ uan_device_list.stdout_lines }}"

  - name: Build list of 25Gb uan_can_devices
    set_fact:
      uan_25G_can_devices: "{{ uan_25G_can_devices }} + ['{{ item.item }}']"
    when: item.stdout | regex_search('Speed:25000Mb')
    loop: "{{ uan_device_speed.results }}"

  - name: Build list of 40Gb uan_can_devices
    set_fact:
      uan_40G_can_devices: "{{ uan_40G_can_devices }} + ['{{ item.item }}']"
    when: item.stdout | regex_search('Speed:40000Mb')
    loop: "{{ uan_device_speed.results }}"

  - name: Set uan_can_devices if only 2 25Gb devices are found
    set_fact:
      uan_can_devices: [ "{{ uan_25G_can_devices[0] }}", "{{ uan_25G_can_devices[1] }}" ]
    when: uan_25G_can_devices | length == 2

  - name: Set uan_can_devices if more than 2 25Gb devices are found
    set_fact:
      uan_can_devices: [ "{{ uan_25G_can_devices[0] }}", "{{ uan_25G_can_devices[2] }}" ]
    when: uan_25G_can_devices | length > 2

  - name: Set uan_can_devices if one or more 40Gb devices are found
    set_fact:
      uan_can_devices: [ "{{ uan_40G_can_devices[0] }}", "{{ uan_40G_can_devices[1] }}" ]
    when: uan_40G_can_devices | length >= 2

  - debug:
      msg: "No connected Customer Access Network interfaces found, skipping CAN configuration."
    when:
      - uan_can_devices | length < 2

  when:
    - can_ip != 'NXDOMAIN'
    - customer_access_network is defined
    - customer_access_gateway is defined

- name: Configure CAN interfaces
  block:

  - name: List uan_can_devices
    debug:
      msg: "{{ uan_can_devices }}"

  - name: Configure bond slaves
    copy:
      src: ifcfg-bond-slaves
      dest: "/etc/sysconfig/network/ifcfg-{{ item }}"
      owner: root
      group: root
      mode: '0644'
    loop: "{{ uan_can_devices }}"

  - name: Configure bond0
    template:
      src: ifcfg-bond0.j2
      dest: "/etc/sysconfig/network/ifcfg-bond0"
      owner: root
      mode: 0644

  - name: Configure ifcfg-vlan007
    template:
      src: ifcfg-vlan007.j2
      dest: /etc/sysconfig/network/ifcfg-vlan007
      mode: 0644

  - name: Configure ifroute-vlan007
    template:
      src: ifroute-vlan007.j2
      dest: /etc/sysconfig/network/ifroute-vlan007
      owner: root
      mode: 0600

  - name: ifdown vlan007 and nmn0 interfaces to set the interface config and routes
    shell: "wicked ifdown {{ item }}"
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result
    with_items:
      - nmn0
      - vlan007

  - name: Wait 5 seconds for the interface to go down
    wait_for:
      timeout: 5

  - name: Restarting wicked-nanny for CAN
    shell: "systemctl restart wickedd-nanny"
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result

  - name: Wait 5 seconds for wickedd-nanny to restart
    wait_for:
      timeout: 5

  - name: Remove existing default route
    command: "ip route delete default"
    changed_when: result.rc != 0 or result.rc == 2
    failed_when: result.rc != 0 and result.rc != 2
    register: result

  - name: ifup vlan007 and nmn0 interfaces to set the interface config and routes
    shell: "wicked ifup {{ item }}"
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result
    with_items:
      - nmn0
      - vlan007

  - name: Wait 10 seconds for the interfaces to come up
    wait_for:
      timeout: 10

  - name: Check that we have the default route we are expecting
    shell: "ip route | grep default | grep -q '{{ customer_access_gateway }}'"
    failed_when: result.rc != 0
    register: result

  - name: Check that the vlan007 interface has the expected IP
    shell: "ip addr show vlan007 | grep -q {{ can_ip }}/{{ can_prefix }}"
    failed_when: result.rc != 0
    register: result

  when:
    - uan_can_devices | length == 2
