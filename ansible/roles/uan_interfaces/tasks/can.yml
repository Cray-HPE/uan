#
# MIT License
#
# (C) Copyright 2020-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
---
- name: "Get {{ uan_user_access_cfg | upper }} info from SLS"
  local_action:
    module: uri
    url: "http://cray-sls/v1/search/networks?name={{ uan_user_access_cfg | upper }}"
    method: GET
  register: sls_can

- name: "Construct {{ uan_user_access_cfg | upper }} full name"
  set_fact:
    sls_can_fullname: "{{ uan_user_access_cfg | upper }} Bootstrap DHCP Subnet"

- name: "Get {{ uan_user_access_cfg | upper }} Subnets"
  set_fact:
    can_subnets: "{{ item.ExtraProperties.Subnets }}"
  loop: "{{ sls_can.json }}"

- name: "Get {{ uan_user_access_cfg | upper }} CIDR from SLS, if network exists."
  set_fact:
    customer_access_ips: "{{ item.IPReservations }}"
    customer_access_network: "{{ item.CIDR }}"
    customer_access_gateway: "{{ item.Gateway }}"
    customer_access_vlan_id: "{{ item.VlanID }}"
  loop: "{{ can_subnets }}"
  when: (sls_can.status == 200) and (item.FullName == sls_can_fullname)

- name: "Get {{ uan_user_access_cfg | upper }} IP from SLS"
  set_fact:
    can_ip: "{{ item.IPAddress }}"
  loop: "{{ customer_access_ips }}"
  when: (sls_can.status == 200) and (item.Name == ansible_hostname)

- name: "FAIL if {{ uan_user_access_cfg | upper }} IP is not defined"
  fail:
    msg: "{{ uan_user_access_cfg | upper }} IP is not defined for {{ ansible_hostname }}"
  when: can_ip is not defined

- name: "FAIL if {{ uan_user_access_cfg | upper }} is not defined"
  fail:
    msg: "{{ uan_user_access_cfg | upper }} is not defined for the node, skipping {{ uan_user_access_cfg | upper }} configuration."
  when: (customer_access_network is not defined) or (customer_access_gateway is not defined)

- name: "Get {{ uan_user_access_cfg | upper }} Prefix"
  set_fact:
      can_prefix: "{{ customer_access_network | ipaddr('prefix') }}"

- name: Configure CAN interfaces
  block:

  - name: Initialize list of uan_can_devices
    set_fact:
      uan_can_devices: []
      uan_25G_can_devices: []
      uan_40G_can_devices: []

  - name: Get list of possible CAN interfaces
    shell: "ip -o link list | cut -f 2 -d ':' | tr -d ' ' | egrep -v 'lo|hsn|bond|lan|nmn0'"
    register: can_device_list

  - name: FAIL if no customer access interfaces are found
    fail:
      msg: "No Customer Access interfaces found"
    when: (can_device_list.stdout_lines | length) < 1

  - name: Ensure list of possible CAN interfaces are UP
    shell: "ip link set dev {{ item }} up"
    register: cmd_out
    failed_when: cmd_out.rc not in [0, 1]
    loop: "{{ can_device_list.stdout_lines }}"

  - name: "List possible {{ uan_user_access_cfg | upper }} interfaces"
    debug:
      msg: "{{can_device_list.stdout_lines }}"

  - name: Collect the ethernet device speeds of UAN devices
    shell: "ethtool {{ item }} | grep Speed | tr -d ' '"
    register: uan_device_speed
    loop: "{{ can_device_list.stdout_lines }}"

  - name: Build list of 25Gb uan_can_devices
    set_fact:
      uan_25G_can_devices: "{{ uan_25G_can_devices }} + ['{{ item.item }}']"
    when: item.stdout | regex_search('Speed:25000Mb')
    loop: "{{ uan_device_speed.results }}"

  - name: Build list of 40Gb uan_can_devices
    set_fact:
      uan_40G_can_devices: "{{ uan_40G_can_devices }} + ['{{ item.item }}']"
    when: item.stdout | regex_search('Speed:40000Mb')
    loop: "{{ uan_device_speed.results }}"

  - name: Set uan_can_devices if only 2 25Gb devices are found
    set_fact:
      uan_can_devices: [ "{{ uan_25G_can_devices[0] }}", "{{ uan_25G_can_devices[1] }}" ]
    when: uan_25G_can_devices | length == 2

  - name: Set uan_can_devices if more than 2 25Gb devices are found
    set_fact:
      uan_can_devices: [ "{{ uan_25G_can_devices[0] }}", "{{ uan_25G_can_devices[2] }}" ]
    when: uan_25G_can_devices | length > 2

  - name: Set uan_can_devices if one or more 40Gb devices are found
    set_fact:
      uan_can_devices: [ "{{ uan_40G_can_devices[0] }}", "{{ uan_40G_can_devices[1] }}" ]
    when: uan_40G_can_devices | length >= 2

  - name: FAIL if CAN interfaces are not connected
    fail:
      msg: "No connected Customer Access Network interfaces found, skipping CAN configuration."
    when:
      - uan_can_devices | length < 2

  - name: List uan_can_devices
    debug:
      msg: "{{ uan_can_devices }}"

  - name: Configure bond slaves
    copy:
      src: ifcfg-bond-slaves
      dest: "/etc/sysconfig/network/ifcfg-{{ item }}"
      owner: root
      group: root
      mode: '0644'
    loop: "{{ uan_can_devices }}"

  - name: Configure bond0
    template:
      src: ifcfg-bond0.j2
      dest: "/etc/sysconfig/network/ifcfg-bond0"
      owner: root
      group: root
      mode: '0644'

  - name: Configure ifcfg-can0
    template:
      src: ifcfg-can0.j2
      dest: /etc/sysconfig/network/ifcfg-can0
      mode: 0644

  - name: Configure ifroute-can0
    template:
      src: ifroute-customer_access.j2
      dest: /etc/sysconfig/network/ifroute-can0
      owner: root
      mode: 0600

  - name: Set list of interfaces to restart for CAN
    set_fact:
      uan_interface: "can0"

  when:
    - (uan_user_access_cfg | upper) == "CAN"
    - "'Compute' not in group_names"

- name: Configure CHN interface
  block:

  - name: Get list of possible CHN interfaces
    shell: "ip -o link list | cut -f 2 -d ':' | tr -d ' ' | egrep 'hsn'"
    register: chn_device_list

  - name: FAIL if no customer access interfaces are found
    fail:
      msg: "No Customer Access interfaces found"
    when: chn_device_list.stdout_lines | length < 1

  - name: Ensure list of possible CHN interfaces are UP
    shell: "ip link set dev {{ chn_device_list.stdout_lines | first }} up"
    register: cmd_out
    failed_when: cmd_out.rc not in [0, 1]

  - name: "List possible {{ uan_user_access_cfg | upper }} interfaces"
    debug:
      msg: "{{chn_device_list.stdout_lines }}"

  - name: "Determine if ifcfg-{{ chn_device_list.stdout_lines | first }} exists"
    stat:
      path: "/etc/sysconfig/network/ifcfg-{{ chn_device_list.stdout_lines | first }}"
    register: ifcfg_chn
    
  - name: "Add CHN IP to {{ chn_device_list.stdout_lines | first }}"
    when: (can_ip is defined) and (not ifcfg_chn.stat.exists)
    shell: "ip address add {{ can_ip }}/{{ can_prefix }} dev {{ chn_device_list.stdout_lines | first }}"
    register: cmd_out
    failed_when: cmd_out.rc not in [0, 1, 2]

  - name: "Add static route for {{ customer_access_gateway }}"
    when:
      - can_ip is defined
      - not ifcfg_chn.stat.exists
    shell: "ip route add {{ customer_access_network }} dev {{ chn_device_list.stdout_lines | first }} src {{ can_ip }}"
    register: cmd_out
    failed_when: cmd_out.rc not in [0, 1, 2]

  - name: "Set default route for {{ customer_access_gateway }}"
    when:
      - can_ip is defined
      - not ifcfg_chn.stat.exists
    shell: "ip route add default via {{ customer_access_gateway }} dev {{ chn_device_list.stdout_lines | first }}"
    register: cmd_out
    failed_when: cmd_out.rc not in [0, 1, 2]

  - name: Set IPADDR1 entry for CHN
    when:
      - can_ip is defined
      - ifcfg_chn.stat.exists
    lineinfile:
      dest: "/etc/sysconfig/network/ifcfg-{{ chn_device_list.stdout_lines | first }}"
      regex: '^IPADDR1=(.*)$'
      line: "IPADDR1={{ can_ip }}/{{ can_prefix }}"

  - name: "Configure ifroute-{{ chn_device_list.stdout_lines | first }}"
    when:
      - can_ip is defined
      - ifcfg_chn.stat.exists
    template:
      src: ifroute-customer_access.j2
      dest: "/etc/sysconfig/network/ifroute-{{ chn_device_list.stdout_lines | first }}"
      owner: root
      mode: 0600

  - name: Set list of interfaces to restart for CHN
    set_fact:
      uan_interface: "{{ chn_device_list.stdout_lines | first }}"

  when: 
    - (uan_user_access_cfg | upper) == "CHN"

- name: Restarting wicked to set new routes
  when: (ifcfg_chn.stat.exists and (uan_user_access_cfg | upper) == "CHN") or (uan_user_access_cfg | upper) == "CAN"
  shell: "systemctl restart wicked;sleep 5"
  changed_when: result.rc == 0
  failed_when: result.rc != 0
  register: result

- name: Restarting wicked-nanny
  when: (ifcfg_chn.stat.exists and (uan_user_access_cfg | upper) == "CHN") or (uan_user_access_cfg | upper) == "CAN"
  shell: "systemctl restart wickedd-nanny;sleep 5"
  changed_when: result.rc == 0
  failed_when: result.rc != 0
  register: result

- name: Remove existing default route
  when: (ifcfg_chn.stat.exists and (uan_user_access_cfg | upper) == "CHN") or (uan_user_access_cfg | upper) == "CAN"
  command: "ip route delete default"
  changed_when: result.rc != 0 or result.rc == 2
  failed_when: result.rc != 0 and result.rc != 2
  register: result

- name: Restart networks to update default route 
  when: (ifcfg_chn.stat.exists and (uan_user_access_cfg | upper) == "CHN") or (uan_user_access_cfg | upper) == "CAN"
  shell: "systemctl restart wicked;sleep 5"
  changed_when: result.rc == 0
  failed_when: result.rc != 0
  register: result

- name: Check that we have the default route we are expecting
  when: not uan_customer_default_route | bool
  shell: "ip route | grep default | grep -q '{{ customer_access_gateway }}'"
  failed_when: result.rc != 0
  register: result

- name: "Check that the {{ uan_interface }} interface has the expected IP"
  shell: "ip addr show {{ uan_interface }} | grep -q {{ can_ip }}/{{ can_prefix }}"
  failed_when: result.rc != 0
  register: result
  when: can_ip is defined
