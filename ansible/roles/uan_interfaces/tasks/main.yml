#
# MIT License
#
# (C) Copyright 2020-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# uan_interfaces tasks
---
- name: "Get BICAN info from SLS"
  local_action:
    module: uri
    url: "http://cray-sls/v1/search/networks?name=BICAN"
    method: GET
  register: sls_bican
  ignore_errors: yes
  run_once: true

- name: "Get BICAN System Default Route Network Name"
  set_fact:
    uan_user_access_cfg: "{{ item.ExtraProperties.SystemDefaultRoute }}"
  when: sls_bican.status == 200
  loop: "{{ sls_bican.json | list }}"
      
- block:
  - name: Get Cabinet info from SLS
    local_action:
      module: uri
      url: "http://cray-sls/v1/search/hardware?type=comptype_cabinet"
      method: GET
    register: sls_cab
    failed_when: sls_cab.status != 200
    run_once: true

  - name: Store Cabinet NMN info
    set_fact:
      cab_info: "{{ sls_cab.json|subelements('Children', skip_missing=True) }}"

  - name: Find NMN gateway for node from cabinet info
    set_fact:
      node_nmn_gateway: "{{ item.0.ExtraProperties.Networks.cn.NMN.Gateway }}"
      node_nmn_cidr: "{{ item.0.ExtraProperties.Networks.cn.NMN.CIDR }}"
    when: (item.1 in ansible_host) and (cab_info is defined)
    loop: "{{ cab_info }}"
    loop_control:
      label: "{{ item.0.Xname }}"

  - name: Get NMN Services Network info from SLS
    local_action:
      module: uri
      url: "http://cray-sls/v1/search/networks?name={{ sls_nmn_svcs_name }}"
      method: GET
    register: sls_nmn_svcs
    failed_when: sls_nmn_svcs.status != 200
    run_once: true

  - name: Get NMN Services CIDR from SLS
    set_fact:
      nmn_svcs_cidr: "{{ sls_nmn_svcs.json[0].ExtraProperties.CIDR }}"

  - name: Get River NMN Network info from SLS
    local_action:
      module: uri
      url: "http://cray-sls/v1/search/networks?name={{ sls_nmn_name }}"
      method: GET
    register: sls_nmn
    failed_when: sls_nmn.status != 200
    run_once: true

  - name: Get NMN CIDR from SLS
    set_fact:
      nmn_cidr: "{{ sls_nmn.json[0].ExtraProperties.CIDR }}"

  - name: Get River NMN gateway
    set_fact:
      nmn_gateway: "{{ nmn_cidr | ipaddr('network/prefix') | ipaddr('next_usable') }}"

  - name: Get Mountain NMN Services Network info from SLS
    local_action:
      module: uri
      url: "http://cray-sls/v1/search/networks?name={{ sls_mnmn_svcs_name }}"
      method: GET
    register: sls_mnmn_svcs
    ignore_errors: yes
    run_once: true

  - name: Get Mountain NMN Services CIDR from SLS, if network exists
    set_fact:
      mnmn_svcs_cidr: "{{ sls_mnmn_svcs.json[0].IPRanges[0] }}"
    when: sls_mnmn_svcs.status == 200

  - name: Get Mountain NMN gateway
    set_fact:
      mnmn_gateway: "{{ mnmn_svcs_cidr | ipaddr('network/prefix') | ipaddr('next_usable') }}"
    when: mnmn_svcs_cidr is defined

  - name: Register node NMN Gateway
    set_fact:
      node_nmn_gateway: "{{ nmn_gateway }}"
      node_nmn_cidr: "{{ nmn_cidr }}"
    when: node_nmn_gateway is not defined

  - name: Slurp in /etc/resolv.conf to get any DHCP added entries
    slurp:
      src: "/etc/resolv.conf"
    register: resolv_conf

  - name: Register /etc/resolv.conf contents
    set_fact:
      resolv: "{{ resolv_conf.content | b64decode }}"

  - name: Parse existing nameservers from /etc/resolv.conf
    set_fact:
      uan_existing_nameservers: "{{ resolv | regex_findall( 'nameserver (\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3})\\b') }}"

  - name: Parse existing search domains from /etc/resolv.conf
    set_fact:
      uan_existing_search_domains: "{{ item.split() }}"
    loop: "{{ resolv | default() | regex_findall( 'search (\\b(?:[a-zA-Z0-9])?(?:[a-zA-Z0-9-]{1,})?(?:\\.[a-zA-Z0-9-]{1,}){1,}\\b.*){1,}') }}"

  - name: Parse existing options from /etc/resolv.conf
    set_fact:
      uan_existing_options: "{{ resolv | regex_findall( 'options (\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3})\\b') }}"

  - name: Slurp in /etc/sysconfig/network/config to get any DHCP added entries
    slurp:
      src: "/etc/sysconfig/network/config"
    register: net_config

  - name: Register /etc/sysconfig/network/config contents
    set_fact:
      netconf: "{{ net_config.content | b64decode }}"

  - name: Parse search domains from config list
    set_fact:
      uan_netconf_search_domains: "{{ item.split() }}"
    loop: "{{ netconf | default() | regex_findall( 'NETCONFIG_DNS_STATIC_SEARCHLIST=\"(.*)\"') }}"

  - name: Parse nameservers from config list
    set_fact:
      uan_netconf_nameservers: "{{ item.split() }}"
    loop: "{{ netconf | default() | regex_findall( 'NETCONFIG_DNS_STATIC_SERVERS=\"(.*)\"') }}"

  - name: Parse options from config list
    set_fact:
      uan_netconf_options: "{{ item.split() }}"
    loop: "{{ netconf | default() | regex_findall( 'NETCONFIG_DNS_RESOLVER_OPTIONS=\"(.*)\"') }}"

  - name: Add existing search domains to uan_netconf_search_domains
    set_fact:
      uan_netconf_search_domains: "{{ uan_netconf_search_domains + [ item ] }}"
    when: (uan_existing_search_domains is defined) and (item not in uan_netconf_search_domains)
    loop: "{{ uan_existing_search_domains }}"

  - name: Add existing nameservers to uan_netconf_nameservers
    set_fact:
      uan_netconf_nameservers: "{{ uan_netconf_nameservers + [ item ] }}"
    when: (uan_existing_nameservers is defined) and (item not in uan_netconf_nameservers)
    loop: "{{ uan_existing_nameservers }}"

  - name: Add existing options to uan_netconf_options
    set_fact:
      uan_netconf_options: "{{ uan_netconf_options + [ item ] }}"
    when: (uan_existing_options is defined) and (item not in uan_netconf_options)
    loop: "{{ uan_existing_options }}"

  - name: Add any customer defined search domains to uan_netconf_search_domains
    set_fact:
      uan_netconf_search_domains: "{{ uan_netconf_search_domains + [ item ] }}"
    when: item not in uan_netconf_search_domains
    loop: "{{ external_dns_searchlist }}"

  - name: Add any customer defined nameservers to uan_netconf_nameservers
    set_fact:
      uan_netconf_nameservers: "{{ uan_netconf_nameservers + [ item ] }}"
    when: item not in uan_netconf_nameservers
    loop: "{{ external_dns_servers }}"

  - name: Add required options to uan_netconf_options
    set_fact:
      uan_netconf_options: "{{ uan_netconf_options + [ item ] }}"
    when: item not in uan_netconf_options
    loop: "{{ uan_required_dns_options }}"

  - name: Add any customer defined options to uan_netconf_options
    set_fact:
      uan_netconf_options: "{{ uan_netconf_options + [ item ] }}"
    when: item not in uan_netconf_options
    loop: "{{ external_dns_options }}"

  - name: Set DNS STATIC SEARCHLIST entries
    when: uan_netconf_search_domains is defined
    lineinfile:
      dest: /etc/sysconfig/network/config
      regex: '^NETCONFIG_DNS_STATIC_SEARCHLIST=\"(.*)\"$'
      line: "NETCONFIG_DNS_STATIC_SEARCHLIST=\"{{ uan_netconf_search_domains | join(' ') }}\""
      backrefs: yes

  - name: Set DNS STATIC SERVERS entries
    when: uan_netconf_nameservers is defined
    lineinfile:
      dest: /etc/sysconfig/network/config
      regex: '^NETCONFIG_DNS_STATIC_SERVERS=\"(.*)\"$'
      line: "NETCONFIG_DNS_STATIC_SERVERS=\"{{ uan_netconf_nameservers | join(' ') }}\""
      backrefs: yes

  - name: Set DNS_RESOLVER_OPTIONS entries
    when: uan_netconf_options is defined
    lineinfile:
      dest: /etc/sysconfig/network/config
      regex: '^NETCONFIG_DNS_RESOLVER_OPTIONS=\"(.*)\"$'
      line: "NETCONFIG_DNS_RESOLVER_OPTIONS=\"{{ uan_netconf_options | join(' ') }}\""
      backrefs: yes

  - name: Configure ifcfg-nmn0
    copy:
      src: ifcfg-nmn0
      dest: /etc/sysconfig/network/ifcfg-nmn0
      owner: root
      group: root
      mode: '0644'

  - name: Configure ifroute-nmn0
    template:
      src: ifroute-nmn0.j2
      dest: /etc/sysconfig/network/ifroute-nmn0
      owner: root
      mode: 0600

  - name: Tell DHCP client to not set default gateway
    lineinfile:
      path: /etc/sysconfig/network/dhcp
      regex: '^DHCLIENT_SET_DEFAULT_ROUTE='
      line: DHCLIENT_SET_DEFAULT_ROUTE="no"

  - name: Reload networks to update /etc/resolv.conf and set routes before removing default route
    shell: "systemctl reload wicked;sleep 5"
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result
    
  - name: Remove existing default route
    command: "ip route delete default"
    changed_when: result.rc != 0 or result.rc == 2
    failed_when: result.rc != 0 and result.rc != 2
    register: result

  # "Configure Customer Access Network"
  - include_tasks: can.yml
    when: uan_can_setup

  # Configure Customer defined interfaces, routes, and rules
  - include_tasks: customer_interfaces.yml
    when: "'Compute' not in group_names"

  # Configure non-root user access controls
  - include_tasks: access_control.yml
    when: 
      - uan_access_control | bool
      - "'Compute' not in group_names"

  when:
    - ('Compute' not in group_names) or ('Compute' in group_names and uan_user_access_cfg == 'CHN')
