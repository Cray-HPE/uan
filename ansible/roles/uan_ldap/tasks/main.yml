#
# MIT License
#
# (C) Copyright 2020-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Tasks for uan_ldap role
---
- name: Configure LDAP
  block:

  # The hashi_vault lookup plugin doesn't support kubernetes auth,
  # so we get the token using the REST API
  - name: Get vault token
    uri:
      url: "{{ uan_vault_url }}/v1/auth/kubernetes/login"
      method: POST
      body:
        jwt: "{{ lookup('file', uan_vault_jwt_file) }}"
        role: "{{ lookup('file', uan_vault_role_file) }}"
      body_format: json
    register: vault_login
    delegate_to: 127.0.0.1
    run_once: true
    no_log: true

  # This task will retrieve the values stored in hashi_vault for
  # a list of keys in an Ansible list variable named uan_ldap_keys.
  # The user is responsible for adding the necessary tasks and templates
  # to use any key values stored in hashi_vault.
  - name: Retrieve UAN vault value for uan_ldap_keys
    set_fact:
        uan_ldap_vars: "{{ lookup('hashi_vault',
        'secret=' + uan_vault_path + ':' + item +
        ' token=' + vault_login.json.auth.client_token +
        ' url=' + uan_vault_url) }}"
    no_log: true
    register: uan_ldap_vars
    delegate_to: 127.0.0.1
    loop: "{{ uan_ldap_keys }}"
    when: uan_ldap_keys|length > 0

  - name: Generate uan_ldap_vars_dict
    set_fact:
      uan_ldap_vars_dict: "{{ uan_ldap_vars_dict|default({}) | combine( { item.item : item.ansible_facts.uan_ldap_vars } ) }}"
    no_log: true
    delegate_to: 127.0.0.1
    loop: "{{ uan_ldap_vars.results }}"
    when: uan_ldap_keys|length > 0

  - name: Set ldap_port
    set_fact:
      ldap_port: 389

  - name: Override ldap_port if ldaps://
    set_fact:
      ldap_port: 636
    when: item.1 is regex('^ldaps://')
    with_subelements:
      - "{{ uan_ldap_config }}"
      - servers

  - name: Make sure we access the ldap servers first
    wait_for:
      host: "{{ item.1 | regex_replace('^ldaps?://', '') }}"
      port: "{{ ldap_port }}"
      state: started
      delay: 0
      timeout: 30
    with_subelements:
      - "{{ uan_ldap_config }}"
      - servers

  - name: Make nscd.conf compatible with sssd
    replace:
      path: /etc/nscd.conf
      regexp: '(^[ \t]+enable\-cache[ \t]+{{ item }}[ \t]+)yes'  
      replace: '\1no'
    with_items:
      - passwd
      - group
      - netgroup
      - services

  - name: Configure pam to use sss and enable mkhomedir
    when: not cray_cfs_image|default(false)
    command: "pam-config -a --sss --mkhomedir"

  - name: Test if /etc/pam.d/<module> is a symlink
    when: uan_pam_modules is defined
    stat:
      path: "/etc/pam.d/{{ item.name }}"
    register: links
    loop: "{{ uan_pam_modules }}"
      
  - name: Remove symlink of /etc/pam.d/<module> from /etc/pam.d/<module>-pc
    when: item.stat.islnk
    file: 
      path: "/etc/pam.d/{{ item.item.name }}"
      state: absent
    loop: "{{ links.results }}"

  - name: Copy /etc/pam.d/<module>-pc to /etc/pam.d/<module>
    when: item.stat.islnk
    shell: "cp /etc/pam.d/{{ item.item.name}}-pc /etc/pam.d/{{ item.item.name }}"
    changed_when: result.rc == 0
    failed_when: result.rc != 0
    register: result
    loop: "{{ links.results }}"

  - name: Add lines to /etc/pam.d/<module>
    when: uan_pam_modules is defined
    lineinfile:
      path: "/etc/pam.d/{{ item.0.name }}"
      regexp: "(^{{ item.1 }})"
      line: "{{ item.1 }}"
    with_subelements:
      - "{{ uan_pam_modules }}"
      - lines

  - name: Generate sssd.conf
    template:
      src: sssd.conf.j2
      dest: /etc/sssd/sssd.conf
      owner: root
      group: root
      mode: 0600

  - name: Start nscd and enable
    when: not cray_cfs_image|default(false)
    service:
      name: nscd
      state: restarted
      enabled: true

  - name: Start and enable sssd
    when: not cray_cfs_image|default(false)
    service:
      name: sssd
      state: restarted
      enabled: true

  - name: Copy over nsswitch.conf
    template:
      src: nsswitch.conf.j2
      dest: /etc/nsswitch.conf
      backup: yes

  - name: Generate new access.conf
    template:
      src: templates/access.conf.j2
      dest: /etc/security/access.conf
      backup: yes
      owner: root
      group: root
      mode: 0644

  when:
    - uan_ldap_setup
    - uan_ldap_config
    - not cray_cfs_image|default(false)
